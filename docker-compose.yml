version: '3.9'

services:

  # compile for manylinux targets and assemble python package wheels
  pkgbuild:
    container_name: pkgbuild
    image: ghcr.io/pyo3/maturin:main
    volumes:
      - ./:/io
    command: build --release --manylinux 2014 --strip  --interpreter 3.8 3.9 3.10 3.11

  # run rust tests
  rust-test:
    container_name: rust-test
    environment:
      - RUST_BACKTRACE=1
    image: meridiancfi/aisdb:latest
    environment:
      - RUST_BACKTRACE=1
    volumes:
      - ./Cargo.toml:/home/ais_env/Cargo.toml
      - ./src:/home/ais_env/src
      - ./build.rs:/home/ais_env/build.rs
      - ./testdata:/home/ais_env/testdata
      - ./target/:/home/ais_env/target
    command:
      ["cargo", "test", "--lib", "--release", "--color=always", "--manifest-path=./aisdb_lib/Cargo.toml"]

  # build python package and run python tests
  python-test:
    build:
      target: aisdb
      context: .
      dockerfile: ./docker/Dockerfile
    container_name: python-test
    # image: meridiancfi/aisdb:latest
    environment:
      - RUST_BACKTRACE=1
      - AISDBDATADIR=/home/ais_env/ais
      - AISDBTESTDIR=/home/ais_env/testdata
    volumes:
      - ${AISDBDATADIR:-/home/$USER/ais/}:/home/ais_env/ais/
      #- ./aisdb_web/dist_coverage/:/home/ais_env/aisdb_web/dist_coverage/
      - ./docs/dist_coverage/:/home/ais_env/docs/dist_coverage/
      - ./target/:/home/ais_env/target
      - ./testdata:/home/ais_env/testdata
    init: true
    command: 
      ["python", "-m", "pytest", "aisdb/tests/", "aisdb/", "aisdb/database/", "aisdb/webdata/",  "--doctest-modules", "--durations=10", "-k", "not timing"]

  # webapp
  webserver:
    container_name: webserver
    init: true
    build: 
      target: webserv
      context: .
      dockerfile: ./docker/Dockerfile
      args:
        AISDBHOST: ${AISDBHOST:-127.0.0.1}
        AISDBPORT: ${AISDBPORT:-9924}
        VITE_BINGMAPTILES: ${VITE_BINGMAPTILES:-}
        VITE_TILESERVER: ${VITE_TILESERVER:-/}
    #depends_on:
    #  - "receiver"
    command:
      ['npm', '--prefix', 'aisdb_web/', 'start']
    networks:
      ipv6_private:
        ipv6_address: "fc00::3"

  # nodejs docs server
  docserver:
    volumes:
      #- ./docs/dist_coverage/:/home/ais_env/aisdb/docs/dist_coverage
      - ./docs/dist_coverage/:/home/ais_env/docs/dist_coverage/
    container_name: docserver
    init: true
    image: meridiancfi/aisdb:latest
    command:
      ['node', 'docs/docserver.js']
    networks:
      ipv6_private:
        ipv6_address: "fc00::4"

  # database server
  websocket:
    container_name: websocket
    image: meridiancfi/aisdb:latest
    environment:
      AISDBHOST: ${AISDBHOST:-127.0.0.1}
      AISDBHOSTALLOW: ${AISDBHOSTALLOW:-*}
      AISDBPORT: ${AISDBPORT:-9924}
      # consider mounting volumes at the following locations
      # ensure that write permissions are allowed on the database file e.g. chmod 777
      AISDBPATH: '/home/ais_env/ais/ais.db'
      AISDBZONES: '/home/ais_env/ais/zones/'
      AISDBMARINETRAFFIC: '/home/ais_env/ais/marinetraffic.db'
      #AISDBDATADIR: '/home/ais_env/ais/'
      #AISDBTESTDIR: '/home/ais_env/testdata'
    init: true
    command: 
      ["python", "-u", "examples/start_websocket.py"]
    networks: 
      ipv6_private:
        ipv6_address: "fc00::6"

  # proxy router
  nginx:
    image: nginx:latest
    container_name: nginx
    environment: 
      AISDBHOST: ${AISDBHOST:-127.0.0.1}
      AISDBPORT: ${AISDBPORT:-9924}
      BINGMAPSKEY: ${BINGMAPSKEY:-""}
    ports:
     - "80:80"
     - "443:443"
     - "9919:9919/udp"
     - "9920:9920"
     - "9921:9921/udp"
     #- "9921:9921"
     - "9922:9922"
     - "9923:9923/udp"
     - "9924:9924"
    networks:
      ipv6_private:
        ipv6_address: "fc00::2"
    volumes:
      - ${HOME}/www/aisdb_cache:/var/www/cache
      - ./docker/nginx.conf:/etc/nginx/templates/nginx.conf.template:ro
      - ./docker/tileserver_proxy.conf:/etc/nginx/tileserver_proxy.conf:ro
    # add something like the following to docker-compose.override.yml for SSL
    #  - ~/cert/conf:/etc/letsencrypt
    init: true
    command:
      ["/bin/sh" , "-c" , "envsubst '$${AISDBHOST} $${AISDBPORT} $${BINGMAPSKEY}' < /etc/nginx/templates/nginx.conf.template > /etc/nginx/nginx.conf && while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;' -c /etc/nginx/nginx.conf"]

  # https://eff-certbot.readthedocs.io/en/stable/using.html#where-are-my-certificates
  certbot:
    image: certbot/certbot
    container_name: certbot
    # add something like the following to docker-compose.override.yml for SSL
    #volumes:
    #  - ~/cert/conf:/etc/letsencrypt
    networks:
      ipv6_private:
        ipv6_address: "fc00::5"
    #entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot certonly --webroot -w /var/www/certbot -d $AISDBHOST -n; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

  receiver:
    container_name: receiver
    init: true
    restart: always
    image: meridiancfi/aisdb:latest
    build: 
      target: aisdb
      context: .
      dockerfile: ./docker/Dockerfile
    # will look for database on path ./receiver/ais_rx.db
    # ensure that write permission is allowed
    volumes:
      - ./receiver:/usr/src/aisdb/receiver
    networks:
      ipv6_private:
        ipv6_address: "fc00::7"
    command: 
      ["aisdb-receiver", 
          "--path", "/usr/src/aisdb/receiver/ais_rx.db", 
          #"--tcp-connect-addr='aisdb.meridian.cs.dal.ca:9920'", 
          #"--tcp-listen-addr='[::]:9922'", 
          #"--tcp-listen-addr='[::]:9920'", 
          "--udp-listen-addr='[::]:9921'", 
          "--tcp-output-addr='[::]:9922'", 
          "--multicast-addr-rawdata='[ff02::1]:9916'",
          "--multicast-addr-parsed='[ff02::1]:9917'"
          #,"--tee"
      ]
    depends_on:
      - nginx

  # forward receiver to downstream
  upstream-ais:
    container_name: upstream-ais
    init: true
    image: meridiancfi/aisdb:latest
    build: 
      target: aisdb
      context: .
      dockerfile: ./docker/Dockerfile
    environment:
      RUST_BACKTRACE: 1
    networks:
      ipv6_private:
        ipv6_address: "fc00::8"
    depends_on:
      - nginx
      - receiver
    working_dir: "/usr/src/aisdb/dispatcher/reverse_proxy"
    command:
      ["mproxy-reverse",
         #"--tcp-output-addr", "[::]:9920",
         #"--tcp-listen-addr", "[::]:9920",
         "--tcp-output-addr", "[::]:9920",
         "--multicast-addr", "[ff02::1]:9916",
         "--udp-output-addr", "[::]:9923"
      ]

networks:
  ipv6_private:
    name: ipv6_private
    enable_ipv6: true
    ipam:
      config:
        - subnet: "fc00:0:0::/120"
          gateway: "fc00:0:0::1"

