# This file is autogenerated by maturin v1.3.1
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
      - master-jk-working
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-test-windows:
    runs-on: windows-latest
    steps:
      - uses: ikalnytskyi/action-setup-postgres@v4
        with:
          password: bigdata1
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain:  stable

      - name: Create and Activate Python Virtual Environment
        run: |
          python -m venv AISdb
          ./AISdb/Scripts/activate

      - name: Install Maturin
        run: python -m pip install maturin

      - name: Build and Install aisdb
        run: |
          ./AISdb/Scripts/activate
          maturin develop --release --extras=test,docs

      - name: Verify Installation
        run: |
          ./AISdb/Scripts/activate
          python -c "import aisdb; assert aisdb.__version__ >= '1.7.0', f'Unexpected aisdb version: {aisdb.__version__}'"
          python -m pip install pytest pytest-dotenv pytest-cov
          pytest ./aisdb/tests/test_11_postgres.py ./aisdb/tests/test_00_decode.py ./aisdb/tests/test_01_createtables.py ./aisdb/tests/test_02_sqlfcn.py ./aisdb/tests/test_02_dbqry.py ./aisdb/tests/test_03_gis.py ./aisdb/tests/test_04_trackgen.py  ./aisdb/tests/test_06_interp.py ./aisdb/tests/test_07_bathymetry.py  ./aisdb/tests/test_08_wsa.py  ./aisdb/tests/test_09_network_graph.py ./aisdb/tests/test_10_ui.py ./aisdb/tests/test_rx.py ./aisdb/tests/test_12_interp.py
#          pytest ./aisdb/tests/test_05_proc_util.py ./aisdb/tests/test_08_marinetraffic.py

  build-and-test-linux:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: bigdata1
        ports:
          - 5432:5432
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Rust Toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env

      - name: Create and Activate Python Virtual Environment
        run: |
          python -m venv AISdb
          source ./AISdb/bin/activate

      - name: Install Maturin
        run: python -m pip install maturin

      - name: Build and Install aisdb
        run: |
          source ./AISdb/bin/activate
          maturin develop --release --extras=test,docs

      - name: Verify Installation
        run: |
          source ./AISdb/bin/activate
          python -c "import aisdb; assert aisdb.__version__ >= '1.7.0', f'Unexpected aisdb version: {aisdb.__version__}'"
          python -m pip install pytest pytest-dotenv pytest-cov
          pytest ./aisdb/tests/test_11_postgres.py ./aisdb/tests/test_00_decode.py ./aisdb/tests/test_01_createtables.py ./aisdb/tests/test_02_sqlfcn.py ./aisdb/tests/test_02_dbqry.py ./aisdb/tests/test_03_gis.py ./aisdb/tests/test_04_trackgen.py  ./aisdb/tests/test_06_interp.py ./aisdb/tests/test_07_bathymetry.py  ./aisdb/tests/test_08_wsa.py  ./aisdb/tests/test_09_network_graph.py ./aisdb/tests/test_10_ui.py ./aisdb/tests/test_rx.py ./aisdb/tests/test_12_interp.py
#          pytest ./aisdb/tests/test_05_proc_util.py ./aisdb/tests/test_08_marinetraffic.py

  linux:
    runs-on:  ubuntu-latest
    strategy:
      matrix:
        # target: [x86_64, x86, aarch64, armv7, s390x, ppc64le]
        # Do not build for s390x and ppc64le at the moment.
        #
        # ring v0.16.20 is a dependency rsutlst
        # rustls is a dependency of tungstenite, which is a dependency of the receiver.
        #
        # The newest version of ring is 0.17.0, but it will support s390x and ppc64le.
        # We will fix this issue when the newest version of the dependencies is released.
        #
        target: [x86_64, x86, aarch64, armv7]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
          before-script-linux: |
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic unzip

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                apt update -y && apt-get install -y libssl-dev openssl pkg-config musl-tools unzip
            fi
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  macos:
    runs-on: macos-latest
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.13
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, windows, macos, sdist]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing *