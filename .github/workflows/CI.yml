name: Pipeline

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  pguser: "postgres"
  pghost: "127.0.0.1"
  pgpass: ${{ secrets.PGPASS }}

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Rust Toolchain (Non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
        shell: bash

      - name: Install Rust Toolchain (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Setup PostgreSQL (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install postgresql -y
          sudo systemctl enable postgresql
          sudo systemctl start postgresql
          sudo -u postgres psql postgres -c "ALTER USER postgres WITH PASSWORD '${{ secrets.PGPASS }}';"
        shell: bash

      - name: Setup PostgreSQL (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install postgresql@14
          brew services start postgresql@14
          brew link postgresql@14 --force
          brew cleanup
          psql postgres -c "CREATE ROLE postgres WITH LOGIN SUPERUSER PASSWORD '${{ secrets.PGPASS }}';"
        shell: bash

      - name: Setup PostgreSQL (Windows)
        if: matrix.os == 'windows-latest'
        uses: ikalnytskyi/action-setup-postgres@v4
        with:
          password: ${{ secrets.PGPASS }}

      - name: Create Python Virtual Environment
        run: |
          python -m venv AISdb
        shell: ${{ matrix.os == 'windows-latest' && 'pwsh' || 'bash' }}

      - name: Activate Virtual Environment and Install Maturin (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          source ./AISdb/bin/activate
          python -m pip install --upgrade pip
          python -m pip install maturin
        shell: bash

      - name: Activate Virtual Environment and Install Maturin (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\AISdb\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          python -m pip install maturin
        shell: pwsh

      - name: Build and Install aisdb (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          source ./AISdb/bin/activate
          maturin develop --release --extras=test,docs
        shell: bash

      - name: Build and Install aisdb (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\AISdb\Scripts\Activate.ps1
          maturin develop --release --extras=test,docs
        shell: pwsh

      - name: Install Test Dependencies (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          source ./AISdb/bin/activate
          python -m pip install pytest pytest-dotenv pytest-cov furl hypothesis trustme astor pyopenssl isort pydirectory
        shell: bash

      - name: Install Test Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\AISdb\Scripts\Activate.ps1
          python -m pip install pytest pytest-dotenv pytest-cov furl hypothesis trustme astor pyopenssl isort pydirectory
        shell: pwsh

      - name: Run Tests (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          source ./AISdb/bin/activate
          pytest ./aisdb/tests
        shell: bash

      - name: Run Tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\AISdb\Scripts\Activate.ps1
          pytest ./aisdb/tests
        shell: pwsh

  build-wheels:
    needs: build-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows Targets
          - os: windows-latest
            target: x64
          - os: windows-latest
            target: x86

          # Linux Targets
          - os: ubuntu-latest
            target: x86_64
          - os: ubuntu-latest
            target: x86

          # macOS Targets
          - os: macos-latest
            target: x86_64
          - os: macos-latest
            target: aarch64

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Rust Toolchain (Non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
        shell: bash

      - name: Install Rust Toolchain (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache Cargo Registry
        if: matrix.os != 'windows-latest' && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Git Index
        if: matrix.os != 'windows-latest' && (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: ${{ matrix.os == 'ubuntu-latest' && 'auto' || '' }}
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-latest' && '10.13' || '' }}

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Rust Toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
        shell: bash

      - name: Install Maturin
        run: python -m pip install maturin

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-wheels, sdist]
    steps:
      - name: Download wheels (Windows x64)
        uses: actions/download-artifact@v3
        with:
          name: wheels-windows-latest-x64
          path: ./dist/wheels/windows-x64

      - name: Download wheels (Windows x86)
        uses: actions/download-artifact@v3
        with:
          name: wheels-windows-latest-x86
          path: ./dist/wheels/windows-x86

      - name: Download wheels (Linux x86_64)
        uses: actions/download-artifact@v3
        with:
          name: wheels-ubuntu-latest-x86_64
          path: ./dist/wheels/linux-x86_64

      - name: Download wheels (Linux x86)
        uses: actions/download-artifact@v3
        with:
          name: wheels-ubuntu-latest-x86
          path: ./dist/wheels/linux-x86

      - name: Download wheels (macOS x86_64)
        uses: actions/download-artifact@v3
        with:
          name: wheels-macos-latest-x86_64
          path: ./dist/wheels/macos-x86_64

      - name: Download wheels (macOS aarch64)
        uses: actions/download-artifact@v3
        with:
          name: wheels-macos-latest-aarch64
          path: ./dist/wheels/macos-aarch64

      - name: Download sdist
        uses: actions/download-artifact@v3
        with:
          name: sdist
          path: ./dist/sdist

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing ./dist/wheels/*/*/*.whl ./dist/sdist/*/*.tar.gz
