name: Pipeline

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

env:
  pguser: "postgres"
  pghost: "127.0.0.1"
  pgpass: ${{ secrets.PGPASS }}

jobs:
  build-and-test-windows:
    runs-on: windows-latest
    # needs: [windows]
    needs: [sdist]
    steps:
      - uses: actions/cache@v3
        with:
          path: |
            AISdb/Lib/site-packages
            C:\Users\runneradmin\.cargo
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-cargo-
      
      - uses: ikalnytskyi/action-setup-postgres@v4
        with:
          password: ${{ secrets.PGPASS }}
      
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: 'x64'
          cache: 'pip'

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          cache: true

      - name: Install wasm-pack
        run: |
          cargo install --locked wasm-pack --verbose
          cargo install --locked wasm-bindgen-cli --verbose
          cargo install --locked wasm-opt --verbose

      - name: Create Python Virtual Environment and Install Dependencies
        run: |
          python -m venv AISdb
          AISdb\Scripts\activate
          python -m pip install --upgrade pip
          python -m pip install xarray
          python -m pip install maturin
          maturin develop --release --extras=test,docs
          python -m pip install --upgrade pytest pytest-dotenv pytest-cov furl hypothesis trustme astor pyopenssl isort pydirectory

      - name: Run Tests
        run: |
          AISdb\Scripts\activate
          pytest ./aisdb/tests/ --ignore=./aisdb/tests/test_014_marinetraffic.py --maxfail=10

      - name: Clean Up
        run: |
          Remove-Item -Recurse -Force AISdb

  build-and-test-linux:
    runs-on: ubuntu-latest
    # needs: [linux]
    needs: [sdist]
    env:
      POSTGRES_USER: ${{ secrets.PGUSER }}
      POSTGRES_PASSWORD: ${{ secrets.PGPASS }}
    steps:
      - uses: actions/cache@v3
        with:
          path: |
            AISdb/lib/python3.10/site-packages
            ~/.cargo
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-cargo-
      
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Rust Toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
      
      - name: Install wasm-pack
        run: |
          cargo install --locked wasm-pack --verbose
          cargo install --locked wasm-bindgen-cli --verbose
          cargo install --locked wasm-opt --verbose
          wasm-pack --version

      # - name: Stop PostgreSQL 16 Service
      #   run: |
      #     if systemctl is-active --quiet postgresql@16-main; then
      #       echo "PostgreSQL 16 is active. Stopping and removing it."
      #       sudo systemctl stop postgresql@16-main
      #       sudo apt-get remove --purge -y postgresql-16 postgresql-client-16 || true
      #       sudo apt-get autoremove -y
      #       sudo apt-get autoclean -y
      #     else
      #       echo "PostgreSQL 16 is not active. No need to stop or remove it."
      #     fi
          
      - name: Setup PostgreSQL 17 Default
        uses: ikalnytskyi/action-setup-postgres@v7
        with:
          username: ${{ secrets.PGUSER }}
          password:  ${{ secrets.PGPASS }}
          database: test
          postgres-version: "17"
          ssl: false
        id: postgres
      
      - name: Test PostgreSQL Connection
        run: |
          psql ${{ steps.postgres.outputs.connection-uri }} -c "SELECT 1"
          psql service=${{ steps.postgres.outputs.service-name }} -c "SELECT 1"
          psql ${{ steps.postgres.outputs.connection-uri }} -c 'SHOW config_file'

      # - name: Check PostgreSQL Version
      #   run: |
      #     sudo -u postgres psql -c "SHOW server_version;"
      #     ls /usr/lib/postgresql/
      #     echo "Checking PostgreSQL port from configuration..."
      #     sudo -u postgres psql -c "SHOW port;"

      - name: Add TimescaleDB Package
        run: |
          echo "deb https://packagecloud.io/timescale/timescaledb/ubuntu/ $(lsb_release -c -s) main" | sudo tee /etc/apt/sources.list.d/timescaledb.list
          wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/timescaledb.gpg
          sudo apt-get update -y
      
      - name: Install and Configure TimescaleDB Extension
        run: |
          sudo apt-get install -y timescaledb-2-postgresql-17 postgresql-client-17
          echo "TimescaleDB Extension installed"

      - name: Apply TimescaleDB tuning
        run: |
          sudo timescaledb-tune --quiet --yes
          echo "TimescaleDB tuning applied"
        
      - name: Restart PostgreSQL
        run: |
          sudo service postgresql restart
          sleep 3
    
      - name: Create TimescaleDB Extension
        run: |
          sudo -u postgres psql ${{ steps.postgres.outputs.connection-uri }} -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"
          echo "TimescaleDB Extension created"
          
      - name: Create Python Virtual Environment and Install Dependencies
        run: |
          python -m venv AISdb
          source ./AISdb/bin/activate
          python -m pip install --upgrade pip
          python -m pip install xarray
          python -m pip install maturin
          maturin develop --release --extras=test,docs
          python -m pip install --upgrade pytest pytest-dotenv pytest-cov furl hypothesis trustme astor pyopenssl isort pydirectory
      
      - name: Run Tests
        run: |
          source ./AISdb/bin/activate
          pytest ./aisdb/tests/ --ignore=./aisdb/tests/test_014_marinetraffic.py --maxfail=10
      
      - name: Clean Up
        run: |
          rm -rf AISdb
          sudo apt-get clean
          
  build-and-test-macos:
    runs-on: macos-latest
    # needs: [macos]
    needs: [sdist]
    env:
      POSTGRES_USER: ${{ secrets.PGUSER }}
      POSTGRES_PASSWORD: ${{ secrets.PGPASS }}
    steps:
      - uses: actions/cache@v3
        with:
          path: |
            AISdb/lib/python3.10/site-packages
            ~/.cargo
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-cargo-
      
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Rust Toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
      
      - name: Install LLVM and Configure clang
        run: |
          brew install llvm
          export PATH="$(brew --prefix llvm)/bin:$PATH"
          export CC="$(brew --prefix llvm)/bin/clang --target=wasm32-unknown-unknown"
          echo "export PATH=$PATH" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV
      
      - name: Install zlib and Ensure pkg-config is Correctly Configured
        run: |
          brew install zlib
          export PKG_CONFIG_PATH=$(brew --prefix zlib)/lib/pkgconfig
          echo "export PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Install wasm-pack
        run: |
          cargo install --locked wasm-pack --verbose
          cargo install --locked wasm-bindgen-cli --verbose
          cargo install --locked wasm-opt --verbose
          wasm-pack --version

      - name: Install PostgreSQL
        run: |
          brew update
          brew install postgresql@17
          brew link postgresql@17 --force
          brew services start postgresql@17
          brew cleanup

      - name: Check PostgreSQL version
        run: |
          brew list | grep postgresql

      - name: Configure PostgreSQL
        run: |
          psql postgres -c "CREATE ROLE postgres WITH LOGIN SUPERUSER PASSWORD '${{ env.POSTGRES_PASSWORD }}';"

      - name: Install TimescaleDB
        run: |
          brew tap timescale/tap
          brew install timescaledb
          timescaledb-tune --quiet --yes
          brew services restart postgresql@17
          brew cleanup

      - name: Setup TimescaleDB
        run: |
          TSDB_PATH=$(brew --prefix timescaledb)/bin
          
          if [ -f "$TSDB_PATH/timescaledb_move.sh" ]; then
            cd "$TSDB_PATH"
            ./timescaledb_move.sh
          else
            echo "Error: timescaledb_move.sh not found!"
            exit 1
          fi
          
          brew services restart postgresql@17
          sleep 5
          psql -U postgres -d postgres -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"

      - name: Create Python Virtual Environment and Install Dependencies
        run: |
          python -m venv AISdb
          source ./AISdb/bin/activate
          python -m pip install --upgrade pip
          python -m pip install xarray
          python -m pip install maturin
          maturin develop --release --extras=test,docs
          python -m pip install --upgrade pytest pytest-dotenv pytest-cov furl hypothesis trustme astor pyopenssl isort pydirectory

      - name: Run Tests
        run: |
          source ./AISdb/bin/activate
          pytest ./aisdb/tests/ --ignore=./aisdb/tests/test_014_marinetraffic.py --maxfail=10

      - name: Clean Up
        run: |
          rm -rf AISdb

  # linux:
  #   runs-on: ubuntu-latest
  #   needs: [sdist]
  #   strategy:
  #     matrix:
  #       target: [ x86_64, x86 ]
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'

  #     - name: Install dependencies
  #       run: |
  #         if command -v yum &> /dev/null; then
  #               sudo yum update -y && sudo yum install -y perl-core openssl openssl-devel pkgconfig libatomic clang gcc-multilib 
  #               # If we're running on i686 we need to symlink libatomic
  #               # in order to build openssl with -latomic flag.
  #               if [[ ! -d "/usr/lib64" ]]; then
  #                   sudo ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
  #               fi
                
  #               echo "finished yum install"
  #           else
  #               # If we're running on debian-based system.
  #               sudo apt update -y && sudo apt-get install -y libssl-dev openssl pkg-config zlib1g-dev clang gcc-multilib  
                
  #               echo "finished apt install"
  #           fi
            
  #     - name: Cache Rust toolchain
  #       uses: actions/cache@v3
  #       with:
  #         path: C:\Users\runneradmin\.cargo
  #         key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           cargo-${{ runner.os }}-
      
  #     - name: Install Rust Target for wasm
  #       run: |
  #         rustup target add wasm32-unknown-unknown
            
  #     - name: install wasm-pack
  #       run: |
  #         cargo install --locked wasm-pack --verbose
  #         cargo install --locked wasm-bindgen-cli --verbose
  #         cargo install --locked wasm-opt --verbose
  #         wasm-pack --version
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: 'true'      
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-linux-${{ matrix.target }}
  #         path: dist

  #     - name: Clean Up
  #       run: |
  #         rm -rf AISdb
  #         rm -rf ~/.cargo
                
  # windows:
  #   runs-on: windows-latest
  #   needs: [sdist]
  #   strategy:
  #     matrix:
  #       target: [ x64, x86 ]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         architecture: ${{ matrix.target }}
  #         cache: 'pip'
  #     - name: Cache Rust toolchain
  #       uses: actions/cache@v3
  #       with:
  #         path: C:\Users\runneradmin\.cargo
  #         key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           cargo-${{ runner.os }}-
  #     - name: Install wasm-pack
  #       run: |
  #         cargo install --locked wasm-pack --verbose
  #         cargo install --locked wasm-bindgen-cli --verbose
  #         cargo install --locked wasm-opt --verbose
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: 'true'
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-windows-${{ matrix.target }}
  #         path: dist
  #     - name: Clean Up
  #       run: |
  #         Remove-Item -Recurse -Force AISdb
  #         Remove-Item -Recurse -Force C:\Users\runneradmin\.cargo\*

  # macos:
  #   runs-on: macos-latest
  #   needs: [sdist]
  #   env:
  #     MACOSX_DEPLOYMENT_TARGET: 10.13
  #   strategy:
  #     matrix:
  #       target: [ x86_64, aarch64 ]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'
  #         cache: 'pip'
  #     - name: Cache Rust toolchain
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.cargo
  #         key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           cargo-${{ runner.os }}-
  #     - name: Install LLVM and Configure clang
  #       run: |
  #         brew install llvm
  #         export PATH="$(brew --prefix llvm)/bin:$PATH"
  #         export CC="$(brew --prefix llvm)/bin/clang --target=wasm32-unknown-unknown"
  #         echo "export PATH=$PATH" >> $GITHUB_ENV
  #         echo "CC=$CC" >> $GITHUB_ENV
  #     - name: Install zlib and Ensure pkg-config is Correctly Configured
  #       run: |
  #         brew install zlib
  #         export PKG_CONFIG_PATH=$(brew --prefix zlib)/lib/pkgconfig
  #         echo "export PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
  #     - name: Install Rust Target for wasm
  #       run: |
  #         rustup target add wasm32-unknown-unknown        
  #     - name: Install wasm-pack
  #       run: |
  #         cargo install --locked wasm-pack --verbose
  #         cargo install --locked wasm-bindgen-cli --verbose
  #         cargo install --locked wasm-opt --verbose
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: 'true'
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-macos-${{ matrix.target }}
  #         path: dist
  #     - name: Clean Up
  #       run: |
  #         rm -rf AISdb
  #         rm -rf ~/.cargo

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [build-and-test-linux, build-and-test-windows, build-and-test-macos]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing *

  # publish-docs:
  #   runs-on: ubuntu-latest
  #   needs: [release]
  #   # needs: [linux]
  #   strategy:
  #     matrix:
  #       target: [ x86_64 ]
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip || exit 1
  #         python -m pip install aisdb || exit 1
  #         python -m pip install sphinx sphinx-rtd-theme matplotlib joblib || exit 1
            
  #     - name: Build docs
  #       run: |
  #         sphinx-apidoc --separate --force --implicit-namespaces --module-first -o docs/source/api aisdb aisdb/tests/*
  #         python -m sphinx -a -j auto -b=html docs/source docs/dist_sphinx

  #     - name: Upload Pages artifact
  #       uses: actions/upload-pages-artifact@v2
  #       with:
  #         path: docs/dist_sphinx
        
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v2
        
  #     - name: Clean Up
  #       run: |
  #         rm -rf gh-pages
  #         rm -rf docs/dist_sphinx
