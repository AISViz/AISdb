name: Pipeline

on:
  push

permissions:
  contents: read
  pages: write
  id-token: write

env:
  pguser: "postgres"
  pghost: "127.0.0.1"
  pgpass: ${{ secrets.PGPASS }}

jobs:
  build-and-test-windows:
    runs-on: windows-latest
    needs: [windows]
    env:
      PGPASSWORD: ${{ secrets.PGPASS }}
    steps:
      - uses: actions/cache@v3
        with:
          path: |
            AISdb/Lib/site-packages
            C:\Users\runneradmin\.cargo
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-cargo-

      # Start Postgres via the action so we can use its outputs consistently
      - name: Setup PostgreSQL (Windows)
        id: postgres
        uses: ikalnytskyi/action-setup-postgres@v7
        with:
          username: postgres
          password: ${{ env.PGPASSWORD }}
          database: postgres
          # Use a runner-provided version; detect below to pick TimescaleDB zip
          postgres-version: "17"
          ssl: false

      - name: Verify connection and inspect config/data dirs
        shell: pwsh
        run: |
          $uri = "${{ steps.postgres.outputs.connection-uri }}"
          psql $uri -c "SELECT version();"
          psql $uri -c "SHOW config_file;"
          psql $uri -c "SHOW data_directory;"

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: 'x64'
          cache: 'pip'

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          cache: true

      - name: Install wasm-pack
        shell: pwsh
        run: |
          cargo install --locked wasm-pack --verbose
          cargo install --locked wasm-bindgen-cli --verbose
          cargo install --locked wasm-opt --verbose

      - name: Install TimescaleDB matching Postgres major (Windows)
        shell: pwsh
        run: |
          $uri = "${{ steps.postgres.outputs.connection-uri }}"
          $pg_version = psql $uri -Atc "SHOW server_version_num;"  # e.g., 170002
          $pg_major = [int]([math]::Floor([int]$pg_version / 10000)) # 17
          Write-Host "Detected PG major: $pg_major"

          # Map major to TimescaleDB Windows artifact name; adjust if names change
          switch ($pg_major) {
            17 { $ts_ver = "2.15.2"; $zip = "timescaledb-postgresql-17-windows-amd64.zip" }
            16 { $ts_ver = "2.15.2"; $zip = "timescaledb-postgresql-16-windows-amd64.zip" }
            15 { $ts_ver = "2.15.2"; $zip = "timescaledb-postgresql-15-windows-amd64.zip" }
            14 { $ts_ver = "2.15.2"; $zip = "timescaledb-postgresql-14-windows-amd64.zip" }
            default { throw "Unsupported Postgres major $pg_major on runner" }
          }

          $url = "https://github.com/timescale/timescaledb/releases/download/$ts_ver/$zip"
          Write-Host "Downloading TimescaleDB from $url"
          Invoke-WebRequest -Uri $url -OutFile "timescaledb.zip"

          New-Item -ItemType Directory -Force -Path "C:\timescaledb" | Out-Null
          Expand-Archive -Path "timescaledb.zip" -DestinationPath "C:\timescaledb" -Force

          $setupPath = Get-ChildItem -Path "C:\timescaledb" -Recurse -Filter "setup.exe" | Select-Object -First 1 | ForEach-Object { $_.FullName }
          if (-not $setupPath) { throw "TimescaleDB setup.exe not found" }
          Unblock-File -Path $setupPath

          # Run installer silently; it will prompt to configure postgresql.conf, but we'll edit exact file ourselves next
          Start-Process -FilePath $setupPath -ArgumentList "/S --yes" -Wait -NoNewWindow

          # Get the exact active config and data directory from the running instance driven by the action
          $config_path = psql $uri -Atc "SHOW config_file;"
          $data_dir = psql $uri -Atc "SHOW data_directory;"
          Write-Host "Active config_file: $config_path"
          Write-Host "Active data_directory: $data_dir"

          # Ensure shared_preload_libraries has timescaledb
          $conf = Get-Content -Raw $config_path
          if ($conf -match "^\s*shared_preload_libraries\s*=") {
            $conf = $conf -replace "(?m)^\s*shared_preload_libraries\s*=.*", "shared_preload_libraries = 'timescaledb'"
          } else {
            $conf += "`r`nshared_preload_libraries = 'timescaledb'`r`n"
          }
          Set-Content -Path $config_path -Value $conf -Encoding UTF8

          # Restart the same instance the action started by using its data directory
          pg_ctl -D "$data_dir" restart
          Start-Sleep -Seconds 5

          # Validate preload took before creating the extension
          psql $uri -c "SHOW shared_preload_libraries;"
          psql $uri -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"

      - name: Verify TimescaleDB Extension
        shell: pwsh
        run: |
          $uri = "${{ steps.postgres.outputs.connection-uri }}"
          psql $uri -c "SELECT * FROM pg_extension WHERE extname = 'timescaledb';"

      - name: Create Python Virtual Environment and Install Dependencies
        shell: pwsh
        run: |
          python -m venv AISdb
          .\AISdb\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          python -m pip install xarray
          python -m pip install maturin
          maturin develop --release --extras=test,docs
          python -m pip install --upgrade pytest pytest-dotenv pytest-cov furl hypothesis trustme astor pyopenssl isort pydirectory

      - name: Run Tests
        shell: pwsh
        run: |
          .\AISdb\Scripts\Activate.ps1
          pytest ./aisdb/tests/ --ignore=./aisdb/tests/test_014_marinetraffic.py --maxfail=10

      - name: Clean Up
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force AISdb

  build-and-test-linux:
    runs-on: ubuntu-latest
    needs: [linux]
    env:
      POSTGRES_USER: ${{ secrets.PGUSER }}
      POSTGRES_PASSWORD: ${{ secrets.PGPASS }}
      PGPASSWORD: ${{ secrets.PGPASS }}
    steps:
      - uses: actions/cache@v3
        with:
          path: |
            AISdb/lib/python3.10/site-packages
            ~/.cargo
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-cargo-

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Rust Toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env

      - name: Install wasm-pack
        run: |
          cargo install --locked wasm-pack --verbose
          cargo install --locked wasm-bindgen-cli --verbose
          cargo install --locked wasm-opt --verbose
          wasm-pack --version

      - name: Setup PostgreSQL 17
        uses: ikalnytskyi/action-setup-postgres@v7
        id: postgres
        with:
          username: ${{ env.POSTGRES_USER }}
          password: ${{ env.POSTGRES_PASSWORD }}
          database: postgres
          postgres-version: "17"
          ssl: false

      - name: Test PostgreSQL Connection and locate config
        run: |
          psql ${{ steps.postgres.outputs.connection-uri }} -c "SELECT 1"
          psql service=${{ steps.postgres.outputs.service-name }} -c "SELECT 1"
          psql ${{ steps.postgres.outputs.connection-uri }} -c "SHOW config_file;"
          psql ${{ steps.postgres.outputs.connection-uri }} -c "SHOW data_directory;"

      - name: Add TimescaleDB apt repo
        run: |
          echo "deb https://packagecloud.io/timescale/timescaledb/ubuntu/ $(lsb_release -c -s) main" | sudo tee /etc/apt/sources.list.d/timescaledb.list
          wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/timescaledb.gpg
          sudo apt-get update -y

      - name: Install TimescaleDB for PG17
        run: |
          sudo apt-get install -y timescaledb-2-postgresql-17 postgresql-client-17
          echo "TimescaleDB installed for PG17"

      - name: Enable TimescaleDB in the exact config
        run: |
          CONFIG_PATH=$(psql ${{ steps.postgres.outputs.connection-uri }} -Atc "SHOW config_file;")
          echo "Editing $CONFIG_PATH"
          sudo sed -i "s/^[#\s]*shared_preload_libraries\s*=.*/shared_preload_libraries = 'timescaledb'/" "$CONFIG_PATH" \
            || echo "shared_preload_libraries = 'timescaledb'" | sudo tee -a "$CONFIG_PATH" > /dev/null
          echo "TimescaleDB preloaded in $CONFIG_PATH"

      - name: Restart the same instance
        run: |
          DATA_DIR=$(psql ${{ steps.postgres.outputs.connection-uri }} -Atc "SHOW data_directory;")
          pg_ctl restart --pgdata="$DATA_DIR"
          sleep 5

      - name: Validate preload and create extension
        run: |
          psql ${{ steps.postgres.outputs.connection-uri }} -c "SHOW shared_preload_libraries;"
          psql ${{ steps.postgres.outputs.connection-uri }} -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"

      - name: Create Python Virtual Environment and Install Dependencies
        run: |
          python -m venv AISdb
          source ./AISdb/bin/activate
          python -m pip install --upgrade pip
          python -m pip install xarray
          python -m pip install maturin
          maturin develop --release --extras=test,docs
          python -m pip install --upgrade pytest pytest-dotenv pytest-cov furl hypothesis trustme astor pyopenssl isort pydirectory

      - name: Run Tests
        run: |
          source ./AISdb/bin/activate
          pytest ./aisdb/tests/ --ignore=./aisdb/tests/test_014_marinetraffic.py --maxfail=10

      - name: Clean Up
        run: |
          rm -rf AISdb
          sudo apt-get clean

  build-and-test-macos:
    runs-on: macos-latest
    needs: [macos]
    env:
      POSTGRES_USER: ${{ secrets.PGUSER }}
      POSTGRES_PASSWORD: ${{ secrets.PGPASS }}
    steps:
      - uses: actions/cache@v3
        with:
          path: |
            AISdb/lib/python3.10/site-packages
            ~/.cargo
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-cargo-

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Rust Toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env

      - name: Install LLVM and Configure clang
        run: |
          brew install llvm
          export PATH="$(brew --prefix llvm)/bin:$PATH"
          export CC="$(brew --prefix llvm)/bin/clang --target=wasm32-unknown-unknown"
          echo "export PATH=$PATH" >> $GITHUB_ENV
          echo "CC=$CC" >> $GITHUB_ENV

      - name: Install zlib and Ensure pkg-config is Correctly Configured
        run: |
          brew install zlib
          export PKG_CONFIG_PATH=$(brew --prefix zlib)/lib/pkgconfig
          echo "export PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Install wasm-pack
        run: |
          cargo install --locked wasm-pack --verbose
          cargo install --locked wasm-bindgen-cli --verbose
          cargo install --locked wasm-opt --verbose
          wasm-pack --version

      # Start Postgres via the action to standardize config/ports
      - name: Setup PostgreSQL 17 (macOS)
        id: postgres
        uses: ikalnytskyi/action-setup-postgres@v7
        with:
          username: ${{ env.POSTGRES_USER }}
          password: ${{ env.POSTGRES_PASSWORD }}
          database: postgres
          postgres-version: "17"
          ssl: false

      - name: Install TimescaleDB (macOS)
        run: |
          brew tap timescale/tap
          brew install timescaledb
          echo "TimescaleDB installed"

      - name: Enable TimescaleDB in the exact config
        run: |
          CONFIG_PATH=$(psql ${{ steps.postgres.outputs.connection-uri }} -Atc "SHOW config_file;")
          echo "Editing $CONFIG_PATH"
          sed -i.bak "s/^[#[:space:]]*shared_preload_libraries\s*=.*/shared_preload_libraries = 'timescaledb'/" "$CONFIG_PATH" \
            || echo "shared_preload_libraries = 'timescaledb'" >> "$CONFIG_PATH"

      - name: Restart the same instance
        run: |
          DATA_DIR=$(psql ${{ steps.postgres.outputs.connection-uri }} -Atc "SHOW data_directory;")
          pg_ctl restart --pgdata="$DATA_DIR"
          sleep 5

      - name: Validate preload and create extension
        run: |
          psql ${{ steps.postgres.outputs.connection-uri }} -c "SHOW shared_preload_libraries;"
          psql ${{ steps.postgres.outputs.connection-uri }} -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"

      - name: Create Python Virtual Environment and Install Dependencies
        run: |
          python -m venv AISdb
          source ./AISdb/bin/activate
          python -m pip install --upgrade pip
          python -m pip install xarray
          python -m pip install maturin
          maturin develop --release --extras=test,docs
          python -m pip install --upgrade pytest pytest-dotenv pytest-cov furl hypothesis trustme astor pyopenssl isort pydirectory

      - name: Run Tests
        run: |
          source ./AISdb/bin/activate
          pytest ./aisdb/tests/ --ignore=./aisdb/tests/test_014_marinetraffic.py --maxfail=10

      - name: Clean Up
        run: |
          rm -rf AISdb

  linux:
    runs-on: ubuntu-latest
    needs: [sdist]
    strategy:
      matrix:
        target: [ x86_64, x86 ]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          if command -v yum &> /dev/null; then
              sudo yum update -y && sudo yum install -y perl-core openssl openssl-devel pkgconfig libatomic clang gcc-multilib
              if [[ ! -d "/usr/lib64" ]]; then
                sudo ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
              fi
              echo "finished yum install"
            else
              sudo apt update -y && sudo apt-get install -y libssl-dev openssl pkg-config zlib1g-dev clang gcc-multilib
              echo "finished apt install"
            fi

      - name: Cache Rust toolchain
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\.cargo
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-

      - name: Install Rust Target for wasm
        run: |
          rustup target add wasm32-unknown-unknown

      - name: install wasm-pack
        run: |
          cargo install --locked wasm-pack --verbose
          cargo install --locked wasm-bindgen-cli --verbose
          cargo install --locked wasm-opt --verbose
          wasm-pack --version

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          
  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   if: "startsWith(github.ref, 'refs/tags/')"
  #   needs: [build-and-test-linux, build-and-test-windows, build-and-test-macos]
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: wheels
  #     - name: Publish to PyPI
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       with:
  #         command: upload
  #         args: --non-interactive --skip-existing *

  # publish-docs:
  #   runs-on: ubuntu-latest
  #   needs: [release]
  #   strategy:
  #     matrix:
  #       target: [ x86_64 ]
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip || exit 1
  #         python -m pip install aisdb || exit 1
  #         python -m pip install sphinx sphinx-rtd-theme matplotlib joblib || exit 1
            
  #     - name: Build docs
  #       run: |
  #         sphinx-apidoc --separate --force --implicit-namespaces --module-first -o docs/source/api aisdb aisdb/tests/*
  #         python -m sphinx -a -j auto -b=html docs/source docs/dist_sphinx

  #     - name: Upload Pages artifact
  #       uses: actions/upload-pages-artifact@v2
  #       with:
  #         path: docs/dist_sphinx
        
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v2
        
  #     - name: Clean Up
  #       run: |
  #         rm -rf gh-pages
  #         rm -rf docs/dist_sphinx
