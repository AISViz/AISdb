name: Pipeline

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  pguser: "postgres"
  pghost: "127.0.0.1"
  pgpass: ${{ secrets.PGPASS }}

jobs:
  build-and-test-windows:
    runs-on: windows-latest
    needs: [windows]
    steps:
      - uses: ikalnytskyi/action-setup-postgres@v4
        with:
          password: ${{ secrets.PGPASS }}
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Create and Activate Python Virtual Environment
        run: |
          python -m venv AISdb
          ./AISdb/Scripts/activate
      - name: Install Maturin
        run: python -m pip install maturin

      - name: Build and Install aisdb
        run: |
          ./AISdb/Scripts/activate
          maturin develop --release --extras=test,docs
      - name: Verify Installation
        run: |
          ./AISdb/Scripts/activate
          python -c "import aisdb; assert aisdb.__version__ >= '1.7.1', f'Unexpected aisdb version: {aisdb.__version__}'"
          python -m pip install --upgrade pip pytest pytest-dotenv pytest-cov furl hypothesis trustme astor pyopenssl isort pydirectory
          pytest ./aisdb/tests

  build-and-test-linux:
    runs-on: ubuntu-latest
    needs: [linux]
    env:
      POSTGRES_USER: ${{ secrets.PGUSER }}
      POSTGRES_PASSWORD: ${{ secrets.PGPASS }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Rust Toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
      - name: Setup PostgreSQL
        run: |
          sudo apt-get install postgresql -y
          sudo systemctl enable postgresql
          sudo systemctl start postgresql
          sudo -u postgres psql postgres -c "ALTER USER postgres WITH PASSWORD '$POSTGRES_PASSWORD';"
      - name: Create and Activate Python Virtual Environment
        run: |
          python -m venv AISdb
          source ./AISdb/bin/activate
      - name: Install Maturin
        run: python -m pip install maturin

      - name: Build and Install aisdb
        run: |
          source ./AISdb/bin/activate
          maturin develop --release --extras=test,docs
      - name: Verify Installation
        run: |
          source ./AISdb/bin/activate
          python -c "import aisdb; assert aisdb.__version__ >= '1.7.1', f'Unexpected aisdb version: {aisdb.__version__}'"
          python -m pip install --upgrade pip pytest pytest-dotenv pytest-cov furl hypothesis trustme astor pyopenssl isort pydirectory
          pytest ./aisdb/tests

  build-and-test-macos:
    runs-on: macos-latest
    needs: [macos]
    env:
        POSTGRES_USER: ${{ secrets.PGUSER }}
        POSTGRES_PASSWORD: ${{ secrets.PGPASS }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Rust Toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env

      - name: Install PostgreSQL
        run: |
          brew install postgresql@14
          brew services start postgresql@14
          brew link postgresql@14 --force
          brew cleanup
      - name: Configure PostgreSQL
        run: |
          psql postgres -c "CREATE ROLE postgres WITH LOGIN SUPERUSER PASSWORD '$POSTGRES_PASSWORD';"
      - name: Create and Activate Python Virtual Environment
        run: |
          python -m venv AISdb
          source ./AISdb/bin/activate
      - name: Install Maturin
        run: python -m pip install maturin

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Build and Install aisdb
        run: |
          source ./AISdb/bin/activate
          maturin develop --release --extras=test,docs
      - name: Verify Installation
        run: |
          source ./AISdb/bin/activate
          python -c "import aisdb; assert aisdb.__version__ >= '1.7.1', f'Unexpected aisdb version: {aisdb.__version__}'"
          python -m pip install --upgrade pip pytest pytest-dotenv pytest-cov furl hypothesis trustme astor pyopenssl isort pydirectory
          pytest ./aisdb/tests

  # Additional jobs for building wheels and uploading artifacts for all three OS
  build-wheels:
    needs: [build-and-test-linux, build-and-test-windows, build-and-test-macos]
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        target: [x86_64, x86]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Installing Rust for building wheels
      - name: Install Rust Toolchain (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env
        shell: bash

      - name: Install Rust Toolchain (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: ${{ matrix.os == 'ubuntu-latest' && 'auto' || '' }}
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-latest' && '10.13' || '' }}

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.target }}
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-wheels]
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing ./dist/*
