image: meridiancfi/aisdb:latest

stages:
  - pkgbuild
  - rust-test
  - python-test
  - build-website
  - publish

.pkgbuild:
  image: 
    name: ghcr.io/pyo3/maturin:main
    entrypoint: [""]
  stage: pkgbuild
  script:
    - maturin build --release --manylinux 2014 --strip --interpreter 3.8 3.9 3.10
  artifacts:
    paths:
      - ./target/wheels/

.rust-test:
  stage: rust-test
  script:
    - cargo test --color=always --release --lib
  artifacts:
    paths:
      - ./testdata/*

.python-test:
  stage: python-test
  script:
    - python -m venv env
    - source env/bin/activate && python -m pip install --upgrade pip maturin
    - source env/bin/activate && maturin develop --release --extras=test,docs
    - mkdir -p data_dir
    - source env/bin/activate && AISDBDATADIR=data_dir python -m pytest aisdb/tests/ --durations=5 -s -k 'not marinetraffic and not rasterio and not pillow and not bathy'
  coverage: '/TOTAL.*\s+(\d+\%)/'
  #dependencies:
  #  - rust-test
  cache:
    key: persistent_000
    paths:
      - ./env
      - ./data_dir
      - ./testdata/
  artifacts:
    paths:
      - ./aisdb_web/dist_coverage/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

.build-website:
  stage: build-website
  only: 
    - master
  #dependencies:
    #- python-test
  script:
    - python -m venv env
    - source env/bin/activate && python -m pip install --upgrade pip maturin sphinx sphinx-rtd-theme
    - source env/bin/activate && maturin develop --release --extras=test,docs
    - cd aisdb_web && npm install
    - source ../env/bin/activate && /bin/bash ./build_website.sh
    - cd ..
  cache:
    key: persistent_000
    paths:
      - ./env
      - ./data_dir
  artifacts:
    paths:
      - ./aisdb_web/

tag:
  stage: publish
  only:
    - master
  #dependencies:
    #- python-test
  #  - build-website
  script: 
    - git config --global --add safe.directory `pwd`
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - TAG=`cat pyproject.toml | grep version | grep -Eo --color=no "[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+"`
    - export TAG
    #- echo "$TAG" > RELEASE_TAG_NAME
    - git tag "$TAG-testCI6"
    - git push --tags https://root:$ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
  release:
    tag_name: $TAG
    description: $TAG


variables:
  ACCESS_TOKEN: $ACCESS_TOKEN
  CI_COMMIT_TAG: $CI_COMMIT_TAG
  CI_SERVER_HOST: $CI_SERVER_HOST
  CI_PROJECT_PATH: $CI_PROJECT_PATH
  GITLAB_USER_NAME: $GITLAB_USER_NAME
  GITLAB_USER_EMAIL: $GITLAB_USER_EMAIL
  #RELEASE_TAG_NAME: "$TAG"
  

