worker_processes auto;
events { worker_connections 1024; }

# https://omarghader.github.io/docker-compose-nginx-tutorial/
# https://pentacent.medium.com/nginx-and-lets-encrypt-with-docker-in-less-than-5-minutes-b4b8a60d3a71

stream {
  ssl_session_tickets off;
  ssl_certificate /etc/letsencrypt/live/${AISDBHOST}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/${AISDBHOST}/privkey.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers off;
  ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";

  # receiver: receive from UDP upstream
  upstream rx {
    server [fc00::7]:9921;
  }
  server {
    listen 9921 udp;
    listen [::]:9921 udp;
    proxy_pass rx;
    proxy_responses 0;
  }

  # receiver: decoded TCP output websocket
  upstream receiver_websocket {
    server [fc00::7]:9922;
  }
  server {
    proxy_pass receiver_websocket;
    listen 9922 ssl;
    listen [::]:9922 ssl;
  }


  # upstream: listen for incoming TCP connections
  upstream tx {
    server [fc00::8]:9920;
  }
  server {
    listen 9920 ssl;
    listen [::]:9920 ssl;
    proxy_pass tx;
  }


  # upstream: listen for UDP
  #upstream tx_input_udp {
  #  server [fc00::8]:9919 ;
  #}
  #server {
  #  listen 9919 udp;
  #  listen [::]:9919 udp;
  #  proxy_pass tx_input_udp;
  #
  #}
  #upstream tcp_raw_tcp {
  #  server [fc00::7]:9922 ;
  #}
  #server {
  #  listen 9922 ssl;
  #  listen [::]:9922 ssl;
  #  proxy_pass tx_raw_tcp;
    #proxy_responses 0;
  #}



  #upstream tx_raw_udp {
  #  server [fc00::8]:9922;
  #}

  #server {
  #  proxy_pass tx_raw_udp;
  #  listen 9922 udp;
  #  listen [::]:9922 udp;
  #  proxy_bind $remote_addr transparent;
  #  proxy_responses 0;
  #}


}

http {
  server_tokens off;
  gzip on;
  gzip_min_length 256;
  gzip_types
    application/geo+json
    application/javascript
    application/json
    application/wasm
    application/xml
    image/svg+xml
    text/css
    text/javascript
    text/js
    text/plain
    text/wasm;

  ssl_session_cache shared:SSL:15m;
  ssl_session_timeout 1440m;
  ssl_session_tickets off;
  ssl_certificate /etc/letsencrypt/live/${AISDBHOST}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/${AISDBHOST}/privkey.pem;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers off;
  ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";

  add_header X-Content-Type-Options "nosniff";
  add_header X-Frame-Options "SAMEORIGIN";
  add_header X-XSS-Protection "1; mode=block";
  proxy_hide_header X-Powered-By;

  upstream websocket {
    server [fc00::6]:${AISDBPORT};
  }

  upstream webserver {
    server [fc00::3]:8080;
  }

  upstream docserver {
    server [fc00::4]:8081;
  }

  #upstream tx {
  #  server [fc00::8]:9920;
  #}



  server {
    listen 80 ;
    listen [::]:80 ;
    location /.well-known/acme-challenge/ {
      root /var/www/certbot;
    }
    location / {
      return 301 https://${AISDBHOST}$request_uri;
      access_log off;
    }
    add_header Content-Security-Policy "default-src 'none' ;" always;

    #add_header X-Content-Type-Options "nosniff";
    #add_header X-Frame-Options "SAMEORIGIN";
    #add_header X-XSS-Protection "1; mode=block";
    #proxy_hide_header X-Powered-By;
    proxy_bind $proxy_protocol_addr transparent;
  }


  proxy_cache_path /var/www/cache levels=1:2 keys_zone=my_cache:10m max_size=128g inactive=480h use_temp_path=off;
  proxy_set_header X-Real-IP       $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;



  server {
    server_name proxy_server;
    #listen 443;
    #listen [::]:443;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;



    set $DEFAULT "default-src 'self' 'unsafe-inline' data: ";
    set $CONNECT "connect-src 'self' wss://${AISDBHOST}/ws wss://${AISDBHOST}:9922/";
      #https://*.virtualearth.net
      #https://*.openstreetmap.org
    set $IMG "img-src 'self' https://aisdb.meridian.cs.dal.ca https://git-dev.cs.dal.ca";
    #set $IMG "${IMG} https://*.virtualearth.net https://*.openstreetmap.org";
    set $IMG "${IMG} https://img.shields.io/gitlab/coverage/meridian/aisdb/master https://img.shields.io/gitlab/v/release/meridian/aisdb https://img.shields.io/gitlab/pipeline-status/meridian/aisdb"; 
    set $SCRIPT "script-src 'self' blob: 'unsafe-eval' 'unsafe-inline'";
    set $SCRIPT "${SCRIPT} https://${AISDBHOST}";
    #set $SCRIPT "${SCRIPT} https://dev.virtualearth.net";
    set $SCRIPT "${SCRIPT} 127.0.0.1";
    set $SCRIPT "${SCRIPT} https://aisdb.meridian.cs.dal.ca";
    #https://*.virtualearth.net
    set $FONT "font-src 'self'";
    set $OBJECT "object-src 'self'";
    add_header Content-Security-Policy "${DEFAULT}; ${CONNECT}; ${IMG}; ${SCRIPT}; ${FONT}; ${OBJECT};" always;
    #add_header Service-Worker-Allowed "";
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
    #add_header X-Content-Type-Options "nosniff";
    #add_header X-Frame-Options "SAMEORIGIN";
    #add_header X-XSS-Protection "1; mode=block";
    #proxy_hide_header X-Powered-By;

    keepalive_timeout 70;

    location /REST/v1/Imagery {
      include tileserver_proxy.conf;
      set $args $args&key=${BINGMAPSKEY};
      proxy_pass https://dev.virtualearth.net;
      proxy_cache my_cache;
    }

    location /tiles {
      include tileserver_proxy.conf;

      #resolver [fc00::1] valid=0s;
      #proxy_pass https://wmtserver/;
      proxy_pass https://ecn.t2.tiles.virtualearth.net;
      proxy_cache my_cache;
      access_log off;
    }

    location ~ "^/[\d]" {
      include tileserver_proxy.conf;
      #proxy_pass $scheme://osmserver;
      proxy_pass https://a.tile.openstreetmap.org;
      proxy_cache my_cache;
    }

    location /ws {
      proxy_pass http://websocket/;  # trailing slash is important! 
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      real_ip_header    X-Real-IP;
    }

    # web app
    location / {
      proxy_pass http://webserver/;
      real_ip_header    X-Real-IP;
      access_log off;
    }

    # mirror root on /map
    location /map/ {
      proxy_pass http://webserver/;
      real_ip_header    X-Real-IP;
    }

    # serve docs on /doc
    location /doc/ {
      proxy_pass http://docserver/; 
    }

    # serve coverage on /coverage
    location /coverage/ {
      proxy_pass http://docserver/coverage/; 
    }
  }	
}
