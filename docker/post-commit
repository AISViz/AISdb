#!/usr/bin/python
'''
Automates version incrementing and changelog updates when a commit is added.
Copy this file to .git/hooks/ to enable
'''

import os
import subprocess

from packaging import version

# project context
projname = 'aisdb'
projdir = subprocess.check_output(
            'git rev-parse --show-toplevel'.split()
            ).decode().strip()

# read latest commit message
commitmessagefile = os.path.join('.git', 'COMMIT_EDITMSG')
with open(commitmessagefile, 'r') as f:
    commitmessage = f.read().strip()

# read changelog
changelogpath = os.path.join(projdir, 'changelog.rst')
if os.path.isfile(changelogpath):
    with open(changelogpath, 'r') as f:
        log = f.readlines()[3:]
else:
    log = []

# check if hook was called recursively
if log[4].strip() == commitmessage.strip():
    print('exiting recursive call to "git commit"\n')
    exit(0)

# parse package version
versionfilepath = os.path.join(projdir, projname, 'version.py')
with open(versionfilepath, 'r') as f:
    exec(f.read())
v = version.Version(__version__)

# increment version number
bump = f'{v.major}.{v.minor}.{v.micro+1}'
bumpv = f'__version__ = "{bump}"\n'
print(f'\nbumping package version:\tv{bump}\t{commitmessage}')

# assemble changelog file
header = '''
Changelog
=========
'''
changes = f'''
v{bump}
-------\n
{commitmessage}\n
'''
newchangelog = header + changes + ''.join(log)


with open(versionfilepath, 'w') as f:
    f.write(bumpv)
with open(changelogpath, 'w') as f:
    f.write(newchangelog)


cmd = f'git add {projname}{os.path.sep}version.py changelog.rst'.split()
subprocess.run(cmd, check=True)

cmd2 = 'git commit --no-verify --amend --no-edit'.split()
subprocess.run(cmd2, check=True)
